# -*- coding: utf-8 -*-
"""ML-Terapan-Dicoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qAnQFRpK-NZpGRZPEnUXQr400A5x9s9P
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd

# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

"""# Data Loading"""

df = pd.read_csv('/content/diabetes_prediction_dataset.csv')
df.head()

df.shape

"""# EDA

## Univariate Analysis
"""

df['gender'].value_counts().plot(kind='bar')
plt.xticks(rotation=0)
plt.title('Gender Distribution')

sns.histplot(data=df, x='age', kde=True, bins=15, hue='diabetes')
plt.title('Age Distribution')

df['hypertension'].value_counts().plot(kind='bar')
plt.xticks(rotation=0)
plt.title('Hypertension')

df['heart_disease'].value_counts().plot(kind='bar')
plt.xticks(rotation=0)
plt.title('Heart Disease')

df['diabetes'].value_counts().plot(kind='bar')
plt.xticks(rotation=0)
plt.title('Diabetes')

"""## Multivariate Analysis"""

df_plot = df[['gender', 'diabetes']].groupby('diabetes').value_counts().reset_index()
sns.barplot(data=df_plot, x='gender', y='count', hue='diabetes')
plt.title('Gender vs Diabetes')

"""From this dataset people from each gender have same amount that have diabetes"""

sns.barplot(data=df, x='diabetes', y='HbA1c_level')
plt.title('Blood Glucose Level vs Diabetes')

"""People who have high HbAic level tend to have diabetes"""

sns.barplot(data=df, x='diabetes', y='blood_glucose_level')
plt.title('Blood Glucose Level vs Diabetes')

"""From this plot we can see that people who have blood glucose level high tend to have diabetes

# Data Preperation

**Change categorical value into numerical value**
"""

encoder = LabelEncoder()
df['gender'] = encoder.fit_transform(df['gender'])
df['smoking_history'] = encoder.fit_transform(df['smoking_history'])
df.head()

"""**Find the correlation between features to target**"""

corr = df.corr()
sns.heatmap(corr, fmt='.2f', annot=True)

"""after looking at the correlation map we can say that blood_glucose_level and HbA1c_level have the biggest correlation to target (diabetes)

**Handle Imbalence Data**
"""

df['diabetes'].value_counts().plot(kind='bar')

"""Base on that image our data seems like imbalence between person without diabetes and person with diabetes, so we need to make the data balance I'm choose to use under sampling method to make the data balance."""

from imblearn.under_sampling import RandomUnderSampler

rus = RandomUnderSampler()

X = df.drop(columns='diabetes')
y = df['diabetes']

X_resampled, y_resampled = rus.fit_resample(X,y)

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=0)

"""# Modeling"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X_train, y_train)

"""# Prediction"""

y_pred = model.predict(X_test)

print(classification_report(y_pred, y_test))

cm = confusion_matrix(y_test,y_pred)
disp = metrics.ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()

"""# Conclusion
After we do some visualization from dataset I can conclude that **people with high HbA1c Level and Blood Glucose Level tend to have diabetes condition**. To predict people that have diabetes I'm using **Linear Regression model** to do the prediction and I got **91% accuracy**.
"""